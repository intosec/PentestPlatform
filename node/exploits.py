from __future__ import absolute_import, unicode_literals
import json
import os
import socket

from .celery import app
from .modules import BaseCeleryTask


# {
#     "action": "node.exploits.pocsuite",
#     "params": {
#         "mode": "verify",
#         "pocfile": "dlink_command_php_exec_noauth.py",
#         "pocname": "dlink_command_php_exec_noauth"
#     },
#     "target": "127.0.0.1:4434"
# }
@app.task(bind=True, base=BaseCeleryTask)
def pocsuite(self, job):
    from pocsuite.api.cannon import Cannon
    from .config import POCSUITE_POCS_DIR

    job = json.loads(job)
    target = job['target']
    params = job['params']
    pocstring = open(os.path.join(POCSUITE_POCS_DIR, params['pocfile'])
                     ).read()
    info = {"pocname": params['pocname'],
            "pocstring": pocstring,
            "mode": params['mode']}

    invoker = Cannon(target, info)

    result = invoker.run()
    job['result'] = result
    return result


@app.task(bind=True, base=BaseCeleryTask)
def msfrpc(self, job):
    from metasploit.msfrpc import MsfRpcClient, MsfRpcError
    res = ''
    try:
        msf = MsfRpcClient('123456')
        print msf.db.connect('msf', database='msf', host='127.0.0.1', password='A0BvciHLAAOjZvLUj4vm3pZAvs8o2D+pS405nzpkjKI=')
        print msf.db.status
        exp = msf.modules.use('exploit', 'windows/iis/ms01_023_printer')
        exp['RHOST'] = '127.0.0.1'
        exp['RPORT'] = 80
        exp['VERBOSE'] = True
        res = exp.execute()
        print msf.call('db.hosts', {})
        print msf.call('db.services', {})
    except socket.error as ex:
        res = ex.strerror
        return res
    except MsfRpcError as ex:
        res = ex.message
        return res

    return res
